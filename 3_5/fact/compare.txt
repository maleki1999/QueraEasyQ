import time


#fact with while loop  

start_time = time.time()
n = int(input())
fact = 1
while n!=0:
    fact *= n
    n-=1
print(fact)
print("--- %s seconds ---" % (time.time() - start_time))

input : 10
output: 3628800
--- 1.791534662246704 seconds ---

########################################################################
#fact with for loop  

start_time = time.time()
n = int(input())
fact = 1
for i in reversed(range(1,n+1)):
    fact *= i
print(fact)
print("--- %s seconds ---" % (time.time() - start_time))

input : 10
output: 3628800
--- 1.2151007652282715 seconds ---

########################################################################
#fact with recursive function
 
start_time = time.time()
def fact(number):
    if number ==1:
        return 1
    else:
        return number*fact(number-1)
print(fact(int(input())))
print("--- %s seconds ---" % (time.time() - start_time))

input : 10
output: 3628800
--- 2.1956191062927246 seconds ---

########################################################################

start_time = time.time()
memory = {}
def memoize_factorial(f):
     
    # This inner function has access to memory
    # and 'f'
    def inner(num):
        if num not in memory:
            memory[num] = f(num)
            print('result saved in memory')
        else:
            print('returning result from saved memory')
        return memory[num]
 
    return inner
     
@memoize_factorial
def facto(num):
    if num == 1:
        return 1
    else:
        return num * facto(num-1)
    
print(facto(10))
print("--- %s seconds ---" % (time.time() - start_time))
start_time = time.time()
print(facto(10)) # directly coming from saved memory
print("--- %s seconds ---" % (time.time() - start_time))

output: 3628800
--- 0.0012204647064208984 seconds ---
returning result from saved memory
3628800
--- 0.0 seconds ---
